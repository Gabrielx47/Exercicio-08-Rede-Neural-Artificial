# -*- coding: utf-8 -*-
"""IA - Exercício - 08 - Rede Neural Artificial - Python -Diabets- SkLearn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EtL6deATmfOdzu1ml0h_IUmCrAGm1A_Y

# Treinamento

### Carregando Arquivo de Treinamento (.csv)
"""

import pandas as pd
# Carregando dados do arquivo CSV
#url = 'https://raw.githubusercontent.com/alcidesbenicasa/IA---2020.1---Exerc-cio---06---Rede-Neural-Artificial/main/dados_pacientes_treinamento.csv'
url = 'https://raw.githubusercontent.com/Gabrielx47/Exercicio-08-Rede-Neural-Artificial/main/diabetes.csv'
base_Treinamento = pd.read_csv(url,sep=',', encoding = 'latin1').values
print("---------------------------------")
print("Dados dos Pacientes - TREINAMENTO")
print("---------------------------------")
print(base_Treinamento)
print("---------------------------------")

# Extração dos Atributos a serem utilizadas pela rede
print("Atributos de Entrada")
print("---------------------------------")
print(base_Treinamento[:, 1:8])

print("----------------------------")
print("Classificação Supervisionada")
print("----------------------------")
print(base_Treinamento[:, 8])

"""### Pré-processamento de Dados"""

import numpy as np 
from sklearn import preprocessing

print("--------------------------------")
print("Atributos de Entrada - Numéricos")
print("--------------------------------")
atributos_norm = base_Treinamento[:, :8]
diagnostico_norm = base_Treinamento[:, 8]
print(atributos_norm)
print(diagnostico_norm)

"""### Treinamento do Neurônio Perceptron"""

from sklearn.linear_model import Perceptron
# Treinamento do Perceptron a partir dos atributos de entrada e classificações
modelo = Perceptron()
modelo.fit(atributos_norm, diagnostico_norm)

# Acurácia do modelo, que é : 1 - (predições erradas / total de predições)
# Acurácia do modelo: indica uma performance geral do modelo. 
# Dentre todas as classificações, quantas o modelo classificou corretamente;
# (VP+VN)/N
print('Acurácia: %.3f' % modelo.score(atributos_norm, diagnostico_norm))

"""### ----------------------------------------------------------------------------

# Validação do Aprendizado

### Predição Simples
"""

Luiz = [[6, 148, 72, 35, 0, 33.6, 627, 50]]
print("João", modelo.predict(Luiz))
Laura = [[1,85,66,29,0,26.6,351,31]]
print("Larissa", modelo.predict(Laura))

"""### Predição a partir de base de dados (.csv)"""

import pandas as pd
# Carregando dados do arquivo CSV
url = 'https://raw.githubusercontent.com/Gabrielx47/Exercicio-08-Rede-Neural-Artificial/main/dadosDoTestes.csv'
base_Testes = pd.read_csv(url,sep=',', encoding = 'latin1').values
print("----------------------------")
print("Dados dos Pacientes - TESTES")
print("----------------------------")
print(base_Testes)
print("---------------------------------")

# Extração dos Atributos a serem utilizadas pela rede
print("Atributos de Entrada")
print("---------------------------------")
print(base_Testes[:, 1:8])

"""### Pré-processamento de Dados"""

import numpy as np 
from sklearn import preprocessing

print("--------------------------------")
print("Atributos de Entrada - Numéricos")
print("--------------------------------")
atributos_norm = base_Testes[:, :8]
print(atributos_norm)

"""### Predição da Base"""

base_Predicao = modelo.predict((atributos_norm))
print("Classificações: ", base_Predicao)

"""### Retorno aos valores Categóricos"""

import numpy as np 
from sklearn import preprocessing

# Binarizador de rótulo
lb = preprocessing.LabelBinarizer()

#Atributos categóricos com valores Não tem diabetes e Tem diabetes
lb.fit(['Não tem diabetes', 'Tem diabetes'])
predicao = lb.inverse_transform(base_Predicao)

#Concatenação de Atributos (Colunas) 
atributos_cat = np.column_stack((base_Testes[:,:8], predicao))
print("--------------------------------")
print("Atributos de Entrada - Numéricos")
print("--------------------------------")
print(atributos_cat)